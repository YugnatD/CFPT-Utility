<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="rtbClockInit.Text" xml:space="preserve">
    <value>/*---------------------------------------------------------------------------*-
   ClockInit ()
  -----------------------------------------------------------------------------
   Descriptif: Initialisation du mode de fonctionnement du clock systeme 
         choix : SYSCLK : oscillateur HF interne e 48 MHz

   Entree    : --
   Sortie    : --
-*---------------------------------------------------------------------------*/
void ClockInit()
{  
   
                     // +--------- clock interne LF
                     // | (1 : oscillateur LF : enable)
                     // | (0 : oscillateur LF: desable)
                     // |+-------- en lecture seule 1 : signal que oscillateur 
                     // ||         interne fonctionne a  sa valeur de prog.
                     // ||++++---- reglage fin de la frequence de l'osc. LF
                     // ||||||++-- choix du diviseur :
                     // ||||||||       (00 : Osc LF /8 -&gt; f = 10 KHz)
                     // ||||||||       (01 : Osc LF /4 -&gt; f = 20 KHz)
                     // ||||||||       (10 : Osc LF /2 -&gt; f = 40 KHz)
                     // ||||||||       (11 : Osc LF /1 -&gt; f = 80 KHz)
   OSCLCN |= 0x00;   // 00000000 

                     // +--------- non utilise
                     // |+++------ Selection du clock USB 
                     // ||||           (010 : Oscil ext. : limiter la conso.)
                     // ||||+----- clock out select
                     // |||||          (0 : sortie sysclk non synchronisee)
                     // |||||          (1 : sortie sysclk synchronisee)
                     // |||||+++-- choix du clock systeme
                     // ||||||||       (000 : Oscil interne 48/4  = 1.5, 3, 6 ou
                     // ||||||||              12 MHz selon le choix du diviseur 
                     // ||||||||              dans OSCICN
                     // ||||||||       (001 : Oscil externe  = x  MHz)
                     // ||||||||       (010 : Oscil interne 48/2 = 24 MHz)
                     // ||||||||       (011 : Oscil interne 48/1 = 48 MHz)    
                     // ||||||||       (100 : Oscil interne LF = 80 KHz max)   
                     // ||||||||       (101 : 111 : reserves)   
   CLKSEL = 0x03;    // 00000011  

                     // +--------- clock interne HF
                     // |              (1 : oscillateur LF : enable)
                     // |              (0 : oscillateur LF: desable)
                     // |+-------- en lecture seule 1 : signal que oscillateur 
                     // ||              interne fonctionne a sa valeur de prog.
                     // ||+------- 1 : suspend l'oscillateur interne
                     // |||+++---- non utilises
                     // ||||||++-- choix du diviseur :
                     // ||||||||       (00 : 12/8 -&gt; f =  1.5 MHz)
                     // ||||||||       (01 : 12/4 -&gt; f =  3   MHz)
                     // ||||||||       (10 : 12/2 -&gt; f =  6   MHz)
                     // ||||||||       (11 : 12/1 -&gt; f = 12   MHz)
   OSCICN = 0xC3;    // 11000011 
   
   FLSCL = 0x90;     // A utiliser si le clock system est a 48 MHz

} // ClockInit ----------------------------------------------------------------</value>
  </data>
  <data name="rtbUart0.Text" xml:space="preserve">
    <value>/*---------------------------------------------------------------------------*-
   Uart0Init()
  -----------------------------------------------------------------------------
   Descriptif:  Active la reception de l'UART0 - Mode 8 bit
   Entree    : --
   Sortie    : --
-*---------------------------------------------------------------------------*/
void Uart0Init()
{  
//Les bit font partie du registre SCON0

//Serial Port 0 Operation Mode.
//0: 8-bit UART with Variable Baud Rate.
//1: 9-bit UART with Variable Baud Rate.
S0Mode=0;

//Multiprocessor Communication Enable.
//The function of this bit is dependent on the Serial Port 0 Operation Mode:
//Mode 0: Checks for valid stop bit.
//0: Logic level of stop bit is ignored.
//1: RI0 will only be activated if stop bit is logic level 1.
//Mode 1: Multiprocessor Communications Enable.
//0: Logic level of ninth bit is ignored.
//1: RI0 is set and an interrupt is generated only when the ninth bit is logic 1.
MCE0=0;

//Receive Enable.
//0: UART0 reception disabled.
//1: UART0 reception enabled.
REN0=1;

//Ninth Transmission Bit.
//The logic level of this bit will be sent as the ninth transmission bit in 9-bit UART Mode 
//(Mode 1). Unused in 8-bit mode (Mode 0).
TB80=0;

//Ninth Receive Bit.
//RB80 is assigned the value of the STOP bit in Mode 0; it is assigned the value of the
//9th data bit in Mode 1.
RB80=0;

//Transmit Interrupt Flag.
TI0=0;

//Receive Interrupt Flag. 
RI0=0;


} // Uart0Init ----------------------------------------------------------------</value>
  </data>
</root>